import telebot
import logging
import sys
from telebot import types
import datetime
import threading
import time
import schedule
import atexit
import signal
import os
import fcntl
from config import *
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

class SingleInstanceBot:
    def __init__(self):
        self.lockfile = 'bot.lock'
        self.lock_fd = None
        
    def __enter__(self):
        try:
            self.lock_fd = open(self.lockfile, 'w')
            fcntl.lockf(self.lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
            return self
        except IOError:
            if self.lock_fd:
                self.lock_fd.close()
            logger.error("Another instance is already running")
            sys.exit(1)
            
    def __exit__(self, *args):
        if self.lock_fd:
            fcntl.lockf(self.lock_fd, fcntl.LOCK_UN)
            self.lock_fd.close()
            try:
                os.remove(self.lockfile)
            except OSError:
                pass

class TelegramBot:
    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN, threaded=False) 
        self.db = Database(DB_FILE)
        self.user_states = {}
        self.setup_handlers()

    def get_main_keyboard(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        item2 = types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        item3 = types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        markup.add(item1, item2)
        markup.add(item3)
        return markup

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            self.bot.reply_to(message, 
                            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –∑–∞–¥–∞—á. –ü–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.",
                            reply_markup=self.get_main_keyboard())

        @self.bot.message_handler(func=lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        def add_task(message):
            msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
            self.user_states[message.from_user.id] = {'state': 'waiting_task_text'}
            self.bot.register_next_step_handler(msg, self.process_task_text)

        @self.bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        def show_tasks(message):
            tasks = self.db.get_tasks(message.from_user.id)
            if tasks:
                response = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
                for task in tasks:
                    task_id, text, category, deadline, priority = task
                    response += f"üîπ {text}\n"
                    response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    response += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                    response += f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n\n"
            else:
                response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
            
            self.bot.send_message(message.chat.id, response)

        @self.bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        def show_completed_tasks(message):
            tasks = self.db.get_tasks(message.from_user.id, 'completed')
            if tasks:
                response = "–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
                for task in tasks:
                    task_id, text, category, deadline, priority = task
                    response += f"‚úÖ {text}\n"
                    response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    response += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {deadline}\n\n"
            else:
                response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
            
            self.bot.send_message(message.chat.id, response)

    def process_task_text(self, message):
        user_id = message.from_user.id
        self.user_states[user_id] = {
            'state': 'waiting_category',
            'task_text': message.text
        }
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        categories = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–ü–æ–∫—É–ø–∫–∏", "–£—á—ë–±–∞", "–î—Ä—É–≥–æ–µ"]
        for category in categories:
            markup.add(types.KeyboardButton(category))
        
        msg = self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        self.bot.register_next_step_handler(msg, self.process_category)

    def process_category(self, message):
        user_id = message.from_user.id
        self.user_states[user_id]['category'] = message.text
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        priorities = ["1 - –í—ã—Å–æ–∫–∏–π", "2 - –°—Ä–µ–¥–Ω–∏–π", "3 - –ù–∏–∑–∫–∏–π"]
        for priority in priorities:
            markup.add(types.KeyboardButton(priority))
        
        msg = self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=markup)
        self.bot.register_next_step_handler(msg, self.process_priority)

    def process_priority(self, message):
        user_id = message.from_user.id
        priority = int(message.text[0])
        self.user_states[user_id]['priority'] = priority
        
        msg = self.bot.send_message(message.chat.id, 
                                  "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                                  "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:00")
        self.bot.register_next_step_handler(msg, self.process_deadline)

    def process_deadline(self, message):
        user_id = message.from_user.id
        try:
            deadline = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            state = self.user_states[user_id]
            
            self.db.add_task(
                user_id=user_id,
                task_text=state['task_text'],
                category=state['category'],
                deadline=deadline.strftime("%Y-%m-%d %H:%M:00"),
                priority=state['priority']
            )
            
            self.bot.send_message(message.chat.id, 
                                "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                                reply_markup=self.get_main_keyboard())
            
        except ValueError:
            msg = self.bot.send_message(message.chat.id, 
                                      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                                      "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            self.bot.register_next_step_handler(msg, self.process_deadline)

    def check_reminders_loop(self):
        while True:
            try:
                now = datetime.datetime.now()
                ahead_time = now + datetime.timedelta(seconds=REMINDER_AHEAD_TIME)
                
                reminders = self.db.get_upcoming_reminders(
                    now.strftime("%Y-%m-%d %H:%M:00"),
                    ahead_time.strftime("%Y-%m-%d %H:%M:00")
                )
                
                for reminder in reminders:
                    user_id, task_text, deadline = reminder
                    self.bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ß–µ—Ä–µ–∑ —á–∞—Å –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:\n{task_text}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {deadline}"
                    )
                
                time.sleep(REMINDER_CHECK_INTERVAL)
            except Exception as e:
                logger.error(f"Error in check_reminders: {e}")
                time.sleep(60)

    def run(self):
        retry_count = 0
        while retry_count < MAX_RETRIES:
            try:
                logger.info("Starting bot...")
                self.db.init_db()
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.bot.remove_webhook()
                self.bot.get_updates(offset=-1)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                reminder_thread = threading.Thread(target=self.check_reminders_loop)
                reminder_thread.daemon = True
                reminder_thread.start()
                
                logger.info("Bot is running...")
                self.bot.polling(none_stop=True, 
                               timeout=POLLING_TIMEOUT,
                               long_polling_timeout=LONG_POLLING_TIMEOUT,
                               allowed_updates=["message", "callback_query"])
                
            except Exception as e:
                retry_count += 1
                logger.error(f"Error occurred: {e}")
                if retry_count < MAX_RETRIES:
                    logger.info(f"Retrying in {RETRY_DELAY} seconds...")
                    time.sleep(RETRY_DELAY)
                else:
                    logger.error("Max retries reached. Shutting down.")
                    sys.exit(1)

def main():
    with SingleInstanceBot():
        bot = TelegramBot()
        
        def signal_handler(signum, frame):
            logger.info("Received shutdown signal")
            bot.bot.stop_polling()
            sys.exit(0)
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        bot.run()

if __name__ == "__main__":
    main()