import telebot
import logging
import sys
from telebot import types
import datetime
import time
import os
import threading
from config import *
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN)
        self.db = Database(DB_FILE)
        self.user_states = {}
        self.setup_handlers()

    def get_main_keyboard(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [
            types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
            types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"),
            types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        ]
        markup.add(*buttons)
        return markup

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –∑–∞–¥–∞—á.",
                reply_markup=self.get_main_keyboard()
            )

        @self.bot.message_handler(func=lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        def add_task(message):
            msg = self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
            self.user_states[message.from_user.id] = {'state': 'waiting_task_text'}
            self.bot.register_next_step_handler(msg, self.process_task_text)

        @self.bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
        def show_tasks(message):
            tasks = self.db.get_tasks(message.from_user.id)
            if tasks:
                for task in tasks:
                    task_id, text, category, deadline, priority = task
                    response = "<b>üìã –ó–∞–¥–∞—á–∞:</b>\n\n"
                    response += f"<b>üîπ –¢–µ–∫—Å—Ç:</b> {text}\n"
                    response += f"<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                    response += f"<b>‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}\n"
                    response += f"<b>‚è∞ –î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n"
                    
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    buttons = [
                        types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"complete_{task_id}"),
                        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{task_id}")
                    ]
                    markup.add(*buttons)
                    
                    self.bot.send_message(
                        message.chat.id,
                        response,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
                )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('complete_'))
        def complete_task_callback(call):
            task_id = int(call.data.split('_')[1])
            if self.db.complete_task(task_id, call.from_user.id):
                self.bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
        def edit_task_callback(call):
            data_parts = call.data.split('_')

            if len(data_parts) == 3:
                action = data_parts[1]
                task_id = int(data_parts[2])
                
                if action == 'text':
                    self.user_states[call.from_user.id] = {
                        'state': 'waiting_edit_text',
                        'task_id': task_id
                    }
                    msg = self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
                    self.bot.register_next_step_handler(msg, self.process_edit_text)
                            
                elif action == 'deadline':
                    self.user_states[call.from_user.id] = {
                        'state': 'waiting_edit_deadline',
                        'task_id': task_id
                    }
                    msg = self.bot.send_message(
                        call.message.chat.id,
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
                    )
                    self.bot.register_next_step_handler(msg, self.process_edit_deadline)

                elif action == 'priority':
                    self.user_states[call.from_user.id] = {
                        'state': 'waiting_edit_priority',
                        'task_id': task_id
                    }
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    priorities = ["1 - –í—ã—Å–æ–∫–∏–π", "2 - –°—Ä–µ–¥–Ω–∏–π", "3 - –ù–∏–∑–∫–∏–π"]
                    for priority in priorities:
                        markup.add(types.KeyboardButton(priority))
                    msg = self.bot.send_message(
                        call.message.chat.id,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
                        reply_markup=markup
                    )
                    self.bot.register_next_step_handler(msg, self.process_edit_priority)
                return
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ edit_ID
            task_id = int(data_parts[1])
            markup = types.InlineKeyboardMarkup(row_width=1)
            buttons = [
                types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{task_id}"),
                types.InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{task_id}"),
                types.InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority_{task_id}"),
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"delete_{task_id}")
            ]
            markup.add(*buttons)
            
            self.bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('edit_text_'))
        def edit_text_callback(call):
            task_id = int(call.data.split('_')[2])
            self.user_states[call.from_user.id] = {
                'state': 'waiting_edit_text',
                'task_id': task_id
            }
            msg = self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
            self.bot.register_next_step_handler(msg, self.process_edit_text)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
        def delete_task_callback(call):
            task_id = int(call.data.split('_')[1])
            if self.db.delete_task(task_id, call.from_user.id):
                self.bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

        @self.bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        def show_completed_tasks(message):
            tasks = self.db.get_tasks(message.from_user.id, status='completed')
            if tasks:
                response = "<b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
                for task in tasks:
                    task_id, text, category, deadline, priority = task
                    response += f"<b>üîπ –ó–∞–¥–∞—á–∞:</b> {text}\n"
                    response += f"<b>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                    response += f"<b>‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}\n"
                    response += f"<b>‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {deadline}\n"
                    response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                
                self.bot.send_message(
                    message.chat.id,
                    response,
                    parse_mode='HTML'
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
                )

    def process_task_text(self, message):
        user_id = message.from_user.id
        self.user_states[user_id] = {
            'state': 'waiting_category',
            'task_text': message.text
        }
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        categories = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–ü–æ–∫—É–ø–∫–∏", "–£—á—ë–±–∞", "–î—Ä—É–≥–æ–µ"]
        for category in categories:
            markup.add(types.KeyboardButton(category))
        
        msg = self.bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(msg, self.process_category)

    def process_category(self, message):
        user_id = message.from_user.id
        self.user_states[user_id]['category'] = message.text
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        priorities = ["1 - –í—ã—Å–æ–∫–∏–π", "2 - –°—Ä–µ–¥–Ω–∏–π", "3 - –ù–∏–∑–∫–∏–π"]
        for priority in priorities:
            markup.add(types.KeyboardButton(priority))
        
        msg = self.bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:",
            reply_markup=markup
        )
        self.bot.register_next_step_handler(msg, self.process_priority)

    def process_priority(self, message):
        user_id = message.from_user.id
        priority = int(message.text[0])
        self.user_states[user_id]['priority'] = priority
        
        msg = self.bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:00"
        )
        self.bot.register_next_step_handler(msg, self.process_deadline)

    def process_deadline(self, message):
        try:
            deadline = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            user_id = message.from_user.id
            state = self.user_states[user_id]
            
            self.db.add_task(
                user_id=user_id,
                task_text=state['task_text'],
                category=state['category'],
                deadline=deadline.strftime("%Y-%m-%d %H:%M:00"),
                priority=state['priority']
            )
            
            self.bot.send_message(
                message.chat.id,
                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=self.get_main_keyboard()
            )
            
        except ValueError:
            msg = self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
            self.bot.register_next_step_handler(msg, self.process_deadline)

    def check_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö"""
        while True:
            try:
                tasks = self.db.get_tasks_for_reminder()
                for task in tasks:
                    task_id, user_id, text, deadline = task
                    deadline_dt = datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M:00")
                    time_left = deadline_dt - datetime.datetime.now()
                    minutes_left = time_left.total_seconds() / 60

                    message = f"‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n\n"
                    message += f"<b>–ó–∞–¥–∞—á–∞:</b> {text}\n"
                    message += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n"
                    message += f"<b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {int(minutes_left)} –º–∏–Ω."

                    try:
                        self.bot.send_message(user_id, message, parse_mode='HTML')
                        self.db.mark_reminder_sent(task_id)
                    except Exception as e:
                        logger.error(f"Error sending reminder: {e}")

                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"Error in reminder check: {e}")
                time.sleep(60)
    
    def run(self):
        logger.info("Starting bot...")
        self.db.init_db()
        reminder_thread = threading.Thread(target=self.check_reminders)
        reminder_thread.daemon = True
        reminder_thread.start()

        logger.info("Bot is running...")
        self.bot.infinity_polling()

    def process_edit_text(self, message):
        user_id = message.from_user.id
        task_id = self.user_states[user_id]['task_id']
        
        if self.db.update_task(task_id, user_id, task_text=message.text):
            self.bot.send_message(
                message.chat.id,
                "‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=self.get_main_keyboard()
            )
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
                reply_markup=self.get_main_keyboard()
            )

    def process_edit_deadline(self, message):
        try:
            deadline = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            user_id = message.from_user.id
            task_id = self.user_states[user_id]['task_id']
            
            if self.db.update_task(task_id, user_id, deadline=deadline.strftime("%Y-%m-%d %H:%M:00")):
                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –î–µ–¥–ª–∞–π–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    reply_markup=self.get_main_keyboard()
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞",
                    reply_markup=self.get_main_keyboard()
                )
        except ValueError:
            msg = self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):"
            )
            self.bot.register_next_step_handler(msg, self.process_edit_deadline)

    def process_edit_priority(self, message):
        try:
            priority = int(message.text[0])
            user_id = message.from_user.id
            task_id = self.user_states[user_id]['task_id']
            
            if self.db.update_task(task_id, user_id, priority=priority):
                self.bot.send_message(
                    message.chat.id,
                    "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    reply_markup=self.get_main_keyboard()
                )
            else:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞",
                    reply_markup=self.get_main_keyboard()
                )
        except (ValueError, IndexError):
            msg = self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:"
            )
            self.bot.register_next_step_handler(msg, self.process_edit_priority)

        def check_reminders(self):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö"""
            while True:
                try:
                    tasks = self.db.get_tasks_for_reminder()
                    for task in tasks:
                        task_id, user_id, text, deadline = task
                        deadline_dt = datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M:00")
                        time_left = deadline_dt - datetime.datetime.now()
                        hours_left = time_left.total_seconds() / 3600

                        message = f"‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n\n"
                        message += f"<b>–ó–∞–¥–∞—á–∞:</b> {text}\n"
                        message += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n"
                        message += f"<b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {int(hours_left)} —á."

                        try:
                            self.bot.send_message(user_id, message, parse_mode='HTML')
                            self.db.mark_reminder_sent(task_id)
                        except Exception as e:
                            logger.error(f"Error sending reminder: {e}")

                    time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                except Exception as e:
                    logger.error(f"Error in reminder check: {e}")
                    time.sleep(60)
    
def main():
    bot = TelegramBot()
    bot.run()

if __name__ == "__main__":
    main()