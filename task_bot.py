import telebot
import logging
import os
import sys
from telebot import types
import datetime
import sqlite3
import threading
import time
import schedule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER, 
                  task_text TEXT,
                  category TEXT,
                  deadline TEXT,
                  priority INTEGER,
                  status TEXT DEFAULT 'active',
                  reminder_time TEXT)''')
    conn.commit()
    conn.close()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    item2 = types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    item3 = types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    item4 = types.KeyboardButton("üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    item5 = types.KeyboardButton("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
    markup.add(item1, item2)
    markup.add(item3, item4)
    markup.add(item5)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 
                 "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –∑–∞–¥–∞—á. –ü–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.",
                 reply_markup=get_main_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
@bot.message_handler(func=lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
def add_task(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    user_states[message.from_user.id] = {'state': 'waiting_task_text'}
    bot.register_next_step_handler(msg, process_task_text)

def process_task_text(message):
    user_id = message.from_user.id
    user_states[user_id] = {
        'state': 'waiting_category',
        'task_text': message.text
    }
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    categories = ["–†–∞–±–æ—Ç–∞", "–õ–∏—á–Ω–æ–µ", "–ü–æ–∫—É–ø–∫–∏", "–£—á—ë–±–∞", "–î—Ä—É–≥–æ–µ"]
    for category in categories:
        markup.add(types.KeyboardButton(category))
    
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_category)

def process_category(message):
    user_id = message.from_user.id
    user_states[user_id]['category'] = message.text
    user_states[user_id]['state'] = 'waiting_priority'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    priorities = ["1 - –í—ã—Å–æ–∫–∏–π", "2 - –°—Ä–µ–¥–Ω–∏–π", "3 - –ù–∏–∑–∫–∏–π"]
    for priority in priorities:
        markup.add(types.KeyboardButton(priority))
    
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_priority)

def process_priority(message):
    user_id = message.from_user.id
    priority = int(message.text[0])
    user_states[user_id]['priority'] = priority
    user_states[user_id]['state'] = 'waiting_deadline'
    
    msg = bot.send_message(message.chat.id, 
                          "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                          "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024 15:00")
    bot.register_next_step_handler(msg, process_deadline)

def process_deadline(message):
    user_id = message.from_user.id
    try:
        deadline = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        user_states[user_id]['deadline'] = deadline.strftime("%Y-%m-%d %H:%M:00")
        
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute("""INSERT INTO tasks 
                    (user_id, task_text, category, deadline, priority, status) 
                    VALUES (?, ?, ?, ?, ?, ?)""",
                 (user_id,
                  user_states[user_id]['task_text'],
                  user_states[user_id]['category'],
                  user_states[user_id]['deadline'],
                  user_states[user_id]['priority'],
                  'active'))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, 
                        "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                        reply_markup=get_main_keyboard())
        
    except ValueError:
        msg = bot.send_message(message.chat.id, 
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, process_deadline)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
def show_tasks(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("""SELECT id, task_text, category, deadline, priority 
                 FROM tasks 
                 WHERE user_id=? AND status='active'
                 ORDER BY priority, deadline""", (user_id,))
    tasks = c.fetchall()
    conn.close()
    
    if tasks:
        markup = types.InlineKeyboardMarkup()
        response = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            task_id, text, category, deadline, priority = task
            deadline_dt = datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M:00")
            response += f"üî∏ {text}\n"
            response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            response += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'‚ùó' * (4 - priority)}\n"
            response += f"–î–µ–¥–ª–∞–π–Ω: {deadline_dt.strftime('%d.%m.%Y %H:%M')}\n"
            
            complete_btn = types.InlineKeyboardButton(
                "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", 
                callback_data=f"complete_{task_id}"
            )
            edit_btn = types.InlineKeyboardButton(
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", 
                callback_data=f"edit_{task_id}"
            )
            delete_btn = types.InlineKeyboardButton(
                "‚ùå –£–¥–∞–ª–∏—Ç—å", 
                callback_data=f"delete_{task_id}"
            )
            markup.add(complete_btn, edit_btn, delete_btn)
            response += "\n"
    else:
        response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        markup = None
    
    bot.send_message(message.chat.id, response, reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
def show_completed_tasks(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("""SELECT task_text, category, deadline 
                 FROM tasks 
                 WHERE user_id=? AND status='completed'
                 ORDER BY deadline DESC""", (user_id,))
    tasks = c.fetchall()
    conn.close()
    
    if tasks:
        response = "–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            text, category, deadline = task
            deadline_dt = datetime.datetime.strptime(deadline, "%Y-%m-%d %H:%M:00")
            response += f"‚úÖ {text}\n"
            response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            response += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {deadline_dt.strftime('%d.%m.%Y %H:%M')}\n\n"
    else:
        response = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."
    
    bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    action, task_id = call.data.split('_')
    
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    
    if action == "complete":
        c.execute("UPDATE tasks SET status='completed' WHERE id=?", (task_id,))
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        
    elif action == "delete":
        c.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        
    elif action == "edit":
        user_states[call.from_user.id] = {
            'state': 'editing',
            'task_id': task_id
        }
        msg = bot.send_message(call.message.chat.id, 
                             "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(msg, process_edit_task)
    
    conn.commit()
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    show_tasks(call.message)

def process_edit_task(message):
    user_id = message.from_user.id
    task_id = user_states[user_id]['task_id']
    
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("UPDATE tasks SET task_text=? WHERE id=?", 
             (message.text, task_id))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, 
                    "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def check_reminders():
    while True:
        try:
            conn = sqlite3.connect('tasks.db')
            c = conn.cursor()
            now = datetime.datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –¥–µ–¥–ª–∞–π–Ω –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å
            c.execute("""SELECT user_id, task_text, deadline 
                        FROM tasks 
                        WHERE status='active' 
                        AND deadline BETWEEN ? AND ?""",
                     (now.strftime("%Y-%m-%d %H:%M:00"),
                      (now + datetime.timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:00")))
            
            tasks = c.fetchall()
            for task in tasks:
                user_id, task_text, deadline = task
                bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ß–µ—Ä–µ–∑ —á–∞—Å –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:\n{task_text}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {deadline}"
                )
            
            conn.close()
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"Error in check_reminders: {e}")
            time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
def safe_exit(signum, frame):
    logger.info("Received signal for shutdown...")
    bot.stop_polling()
    sys.exit(0)

if __name__ == "__main__":
    try:
        logger.info("Starting bot...")
        init_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        reminder_thread = threading.Thread(target=check_reminders)
        reminder_thread.daemon = True
        reminder_thread.start()
        
        logger.info("Bot is running...")
        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã polling
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        sys.exit(1)